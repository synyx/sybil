#%RAML 0.8
---
title: Sybil
baseUri: https://api.sybil.synyx.coffee
version: DRAFT 1
mediaType: application/vnd.synyx.sybil-v1+hal+json

documentation:
 - title: Introduction
   content: |
    ---
    This is only a short overview, the whole documentation will (hopefully soon) be available at http://wiki.sybil.synyx.coffee/
    
    This API maps Inputs to Outputs.  
    **Inputs** can bei either *status*es, from Jenkins builds or systems watched by Nagios, or *binary*s, e.g. buttons,
    either on a web-interface or actual physical objects.  
    **Outputs** can be either *light*s (white light, illuminating the room at large), *ledstrip*s (multi-colored
    lights, used mostly for information), or *notification*s (direct notifications in any manner of ways).
    
    Each Input can control zero or more Outputs, and each Output can be controlled by zero or more Inputs.  
    Accordingly, each Input has a list of associated Outputs and each Output a list of associated Inputs.
    
 - title: Resources
   content: |
    ---
    All resource names must be lowercase and contain only alphanumeric characters and underscores.

 - title: Configuration
   content: |
    ---
    The configuration resources consist of "bricks", the base Tinkerforge base platform, and several types of
    "bricklets", the components attached to the bricks.
    
    Bricklets can only be added to existing bricks, so we have to configure the bricks first.  
    
    ### Bricks
    ---
    
    A brick resources has a unique name, which is equivalent to the brick's **hostname**.
    It has one optional property:
        
    * port - The network port on which the brick communicates, defaults to 4223 if not specified otherwise.
    
    ### Bricklets
    ---
    
    #### **LED Strips**
    
    A ledstrip resource has a unique name, under which it can be addressed by an output resource's *destination* property.
    It has the following properties:
    
    * uid - The bricklet's unique ID. It can be found through the Tinkerforge brick viewer.
    * brick - The name of the brick the bricklet is connected to. Must already be configured.
    * length - The number of RGB LEDs connected to the bricklet.
    
    #### **Lights**
    
    A light resource has a unique name, under which it can be addressed by an output resource's *destination* property.
    It has the following properties:
    
    * uid - The bricklet's unique ID. It can be found through the Tinkerforge brick viewer.
    * brick - The name of the brick the bricklet is connected to. Must already be configured.    
    
    #### **Buttons**
    
    A button resource has a unique name, under which it can be addressed by an input resource's *source* property.
    It has the following properties:
    
    * uid - The bricklet's unique ID. It can be found through the Tinkerforge brick viewer.
    * brick - The name of the brick the bricklet is connected to. Must already be configured.    
    * type - A button can be one of the following types:
      * on - The buttons turns it's associated outputs on.
      * off - The button turns it's associated outputs off.
      * toggle - The button toggles it's associated outputs from on to off or from off to on.
      
    #### **Sensors**
    
    A sensor resource has a unique name and has the following properties:
    
    * uid - The bricklet's unique ID. It can be found through the Tinkerforge brick viewer.
    * brick - The name of the brick the bricklet is connected to. Must already be configured.    
    * type - A sensor can be of the following types:
      * luminance - The sensor measures brightness.
      * motion - The sensor is a motion detector.
        
 - title: Inputs & Outputs
   content: |
    ---
    
    #### **Inputs**
    
    An input resource has a unique name, under which outputs can link to it.
    It also has the following properties:
    
    * type - Dictates the *state*s the input can take:
      * binary - *state* is either *false* or *true*, representing off and on respectively.
      * status - *state* is either "OK", "WARNING", or "CRITICAL".
    
    
    * source - An array, dictating where the input's state comes from.
      The first element of the array must be one of four strings, following elements further specify the source:
      * [ "jenkins", "{job name}" ]
      * [ "nagios", "{hostname}", "{optional servicename}" ]
      * [ "button", "{button name}", "{input number: 0-3} ]
      * [ "trigger" ]
  
    
    * state - The input's state, deciding the associated outputs' behaviour:
      * true
      * false
      * "OK"
      * "WARNING"
      * "CRITICAL"

    #### **Outputs**
    
    An output resource has a unique name, under which inputs can link to it.
    It also has the following properties:
    
    * type - The type of the output:
      * ledstrip
      * light
      * notification
    
    
    * destination - Which is an array, pointing to the actual hardware or communication channel:
      * [ "{ledstrip resource}" ]
      * [ "{light resource}", "{relay number: 1|2}" ]
      * [ "{notification protocol}", "{user/channel/etc.}" ]


    * state - The output's state:
      * false - The output is not active: All the linked inputs have their states false or "OK".
      * true - The output is active: At least one of the inputs has its state true, "WARNING", or "CRITICAL"
    
 - title: Media Types
   content: |
    ---
    Request bodies should have the type
    
        application/vnd.synyx.sybil-v1+json
        
    if applicable.
        
    Responses will usually contain a body of the type
    
        application/vnd.synyx.sybil-v1+hal+json
        
    or, in some cases, no body at all.
    
    In case of an error, the body of the response will be of the type
    
        application/problem+json
        
    and the API will of course return a HTTP error status code.
 
 - title: Missing examples
   content: |
    ---
    Examples for the HTTP **HEAD** and **OPTIONS** verbs are not provided, as their responses are subsets of the
    one provided by **GET**.
 
 - title: Unsupported methods
   content: |
    ---
    Using an unsupported verb on a resource will result in this error message:

    > #### HTTP status code [405](http://httpstatus.es/405)
    > ---
    > Error - METHOD NOT ALLOWED
    >
    > Body
    >
    > **Type: application/problem+json**
    >
    > **Example:**
    >
    >     {
    >       "type": "http://wiki.sybil.synyx.coffee/errors/method_not_allowed",
    >       "title": "Method Not Allowed",
    >       "detail": "This resource does not support PUT"
    >     }
        

traits:
  - paginated:
      queryParameters:
        offset:
          type: number
          description: The first entry to be retrieved
          required: false
          example: offset=20
        limit:
          type: number
          description: The number of entries that will be retrieved
          required: false
          example: limit=10

/:
  description: API root
  get:
    description: Retrieve the API root.
    responses:
      200:
        description: Success - OK
        headers:
          Allow:
            example: GET
        body:
          example: !include root-get.example

/inputs:
  description: Inputs, controlling outputs.
  get:
    description: |
      Retrieve the list of inputs.   
      **Note:** This returns only truncated input objects.
    is: [ paginated ]
    queryParameters:
      type:
        type: string
        description: The type of the Input
        required: false
        example: type=status
    responses:
      200:
        description: Success - OK
        headers:
          Allow:
            example: GET
        body:
          example: !include inputs-get.example      
  
  /{inputname}:
    description: A specific input
    get:
      description: Retrieve a specific input.
      responses:
        200:
          description: Success - OK
          headers:
            Allow:
              example: GET, PUT, PATCH, DELETE
          body:
            example: !include input-get.example
        404:
          description: Error - NOT FOUND
          body:
            application/problem+json:
              example: !include input-not-found.example
    put:
      description: |
        Create or update an input.
        
        A newly created input's state, if not supplied, will be either "OK" or false, depending on it's type.
      body:
        application/vnd.synyx.sybil-v1+json:
          schema: !include input.schema
          example: !include input-put.example
      responses:
        200:
          description: |
            Success - OK  
            Input updated.
            
            **Example:** See below.
        201:
          description: |
            Success - CREATED  
            Input created.
          body:
            example: !include input-put-response.example
        400:
          description: Error - BAD REQUEST
          body:
            application/problem+json:
              example: !include input-put-validation-error.example
    patch:
      description: Change an input's state.
      body:
        application/vnd.synyx.sybil-v1+json:
          schema: !include input-patch.schema
          example: !include input-patch-request.example
      responses:
        200:
          description: Success - OK
          body:
            example: !include input-patch-response.example
        400:
          description: Error - BAD REQUEST
          body:
            application/problem+json:
              example: !include input-patch-validation-error.example
        404:
          description: Error - NOT FOUND
          body:
            application/problem+json:
              example: !include input-not-found.example
    delete:
      description: Delete an input.
      responses:
        204:
          description: Success - NO CONTENT
        404:
          description: Error - NOT FOUND
          body:
            application/problem+json:
              example: !include input-not-found.example
        
    /outputs:
      description: Links to the outputs this input is controlling.
      get:
        description: Retrieve the list of this input's associated outputs.
        is: [ paginated ]
        queryParameters:
          type:
            type: string
            description: The type of the Output
            required: false
            example: type=light
        responses:
          200:
            description: Success - OK
            headers:
              Allow:
                example: GET
            body:
              example: !include input-outputs-get.example
  
      /{outputname}:
        description: A specific associated output.
        get:
          description: Retrieve a specific associated output.
          responses:
            200:
              description: Success - OK
              headers:
                Allow:
                  example: GET, PUT, DELETE
              body:
                example: !include input-outputs-output-get.example
            404:
              description: Error - NOT FOUND
              body:
                application/problem+json:
                  example: !include output-not-found.example
        put:
          description: Associate a new output with this input.
          responses:
            201:
              description: Success - CREATED
              body:
                example: !include input-outputs-output-get.example
            404:
              description: Error - NOT FOUND
              body:
                application/problem+json:
                  example: !include inputs-input-output-not-found.example
        delete:
          description: Remove the input's association with this output.
          responses:
            204:
              description: Success - NO CONTENT
            404:
              description: Error - NOT FOUND
              body:
                application/problem+json:
                  example: !include output-not-found.example

/outputs:
  description: Outputs.
  get:
    description: |
      Retrieve the list of outputs.   
      **Note:** This returns only truncated output objects.
    is: [ paginated ]
    queryParameters:
      type:
        type: string
        description: The type of the Output
        required: false
        example: type=ledstrip
    responses:
      200:
        description: Success - OK
        headers:
          Allow:
            example: GET
        body:
          example: !include outputs-get.example      
  
  /{outputname}:
    description: A specific output
    get:
      description: Retrieve a specific output.
      responses:
        200:
          description: Success - OK
          headers:
            Allow:
              example: GET, PUT, DELETE
          body:
            example: !include output-get.example
        404:
          description: Error - NOT FOUND
          body:
            application/problem+json:
              example: !include output-not-found.example
    put:
      description: Create or update an output.
      body:
        application/vnd.synyx.sybil-v1+json:
          schema: !include output.schema
          example: !include output-put.example
      responses:
        200:
          description: |
            Success - OK
            
            **Example:** See below.
        201:
          description: Success - CREATED
          body:
            example: !include output-get.example
        400:
          description: Error - BAD REQUEST
          body:
            application/problem+json:
              example: !include outputs-output-put-validation-error.example
    delete:
      description: Delete an output.
      responses:
        204:
          description: Success - NO CONTENT
        404:
          description: Error - NOT FOUND
          body:
            application/problem+json:
              example: !include output-not-found.example
  
    /inputs:
      description: Links to the inputs this output is controlled by. 
      get:
        description: Retrieve the list of the output's associated inputs.
        is: [ paginated ]
        queryParameters:
          type:
            type: string
            description: The type of the Input
            required: false
            example: type=binary
        responses:
          200:
            description: Success - OK
            headers:
              Allow:
                example: GET
            body:
              example: !include output-inputs-get.example
  
      /{inputname}:
        description: A specific associated input.
        get:
          description: Retrieve a specific associated input.
          responses:
            200:
              description: Success - OK
              headers:
                Allow:
                  example: GET, PUT, DELETE
              body:
                example: !include output-inputs-input-get.example
            404:
              description: Error - NOT FOUND
              body:
                application/problem+json:
                  example: !include input-not-found.example
        put:
          description: Associate a new input with this output.
          responses:
            201:
              description: Success - CREATED
              body:
                example: !include output-inputs-input-get.example
            400:
              description: Error - BAD REQUEST
              body:
                application/problem+json:
                  example: !include outputs-output-input-not-found.example        

        delete:
          description: Remove the output's association with this input.
          responses:
            204:
              description: Success - NO CONTENT
            404:
              description: Error - NOT FOUND
              body:
                application/problem+json:
                  example: !include input-not-found.example

/configuration:
  description: Configuration of the underlying Tinkerforge hardware.
  get:
    description: Retrieve the configuration root.
    responses:
      200:
        description: Success - OK
        headers:
          Allow:
            example: GET
        body:
          example: !include configuration-get.example
          
  /bricks:
    description: List of Tinkerforge Master bricks. Used internally.
    get:
      description: Retrieve the list of bricks.
      is: [ paginated ]
      responses:
        200:
          description: Success - OK
          headers:
            Allow:
              example: GET
          body:
            example: !include bricks-get.example
    
    /{hostname}:
      description: A specific brick.
      get:
        description: Retrieve a specific brick.
        responses:
          200:
            description: Success - OK
            headers:
              Allow:
                example: GET, PUT, DELETE
            body:
              example: !include brick-get.example
          404:
            description: Error - NOT FOUND
            body:
              application/problem+json:
                example: !include brick-not-found.example
      put:
        description: Create or update a brick. The resource name has to be the same as the brick's hostname.
        body:
         application/vnd.synyx.sybil-v1+json:
           schema: !include brick.schema
        responses:
         200:
           description: |
             Success - OK
             
             **Example:** See below.
         201:
           description: Success - CREATED
           body:
             example: !include brick-get.example
         400:
           description: Error - BAD REQUEST
           body:
             application/problem+json:
               example: !include brick-put-validation-error.example
      delete:
        description: Delete a brick.
        responses:
         204:
           description: Success - NO CONTENT
         404:
           description: Error - NOT FOUND
           body:
             application/problem+json:
               example: !include brick-not-found.example

  /ledstrips:
    description: List of LED Strips; ledstrip-type outputs can have these as their destination.
    get:
      description: Retrieve the list of ledstrips.
      is: [ paginated ]
      responses:
        200:
          description: Success - OK
          headers:
            Allow:
              example: GET
          body:
            example: !include ledstrips-get.example
    
    /{outputname}:
      description: A specific LED Strip.
      get:
        description: Retrieve a specific LED Strip.
        responses:
          200:
            description: Success - OK
            headers:
              Allow:
                example: GET, PUT, DELETE
            body:
              example: !include ledstrip-get.example
          404:
            description: Error - NOT FOUND
            body:
              application/problem+json:
                example: !include ledstrip-not-found.example
      put:
        description: Create or update a LED Strip.
        body:
         application/vnd.synyx.sybil-v1+json:
           schema: !include ledstrip.schema
           example: !include ledstrip-put.example
        responses:
         200:
           description: |
             Success - OK
             
             **Example:** See below.
         201:
           description: Success - CREATED
           body:
             example: !include ledstrip-get.example
         400:
           description: Error - BAD REQUEST
           body:
             application/problem+json:
               example: !include ledstrip-put-validation-error.example
      delete:
        description: Delete a LED Strip.
        responses:
         204:
           description: Success - NO CONTENT
         404:
           description: Error - NOT FOUND
           body:
             application/problem+json:
               example: !include ledstrip-not-found.example
      
      
  /lights:
    description: List of lights; light-type outputs can have these as their destination.
    get:
      description: Retrieve the list of lights.
      is: [ paginated ]
      responses:
        200:
          description: Success - OK
          headers:
            Allow:
              example: GET
          body:
            example: !include lights-get.example
                  
    /{outputname}:
      description: A specific light.
      get:
        description: Retrieve a specific light.
        responses:
          200:
            description: Success - OK
            headers:
              Allow:
                example: GET, PUT, DELETE
            body:
              example: !include light-get.example
          404:
            description: Error - NOT FOUND
            body:
              application/problem+json:
                example: !include light-not-found.example
      put:
        description: Create or update a light.
        body:
         application/vnd.synyx.sybil-v1+json:
           schema: !include light.schema
           example: !include light-put.example
        responses:
         200:
           description: |
             Success - OK
             
             **Example:** See below.
         201:
           description: Success - CREATED
           body:
             example: !include light-get.example
         400:
           description: Error - BAD REQUEST
           body:
             application/problem+json:
               example: !include light-put-validation-error.example
      delete:
        description: Delete a light.
        responses:
         204:
           description: Success - NO CONTENT
         404:
           description: Error - NOT FOUND
           body:
             application/problem+json:
               example: !include light-not-found.example

  /buttons:
    description: A list of buttons; binary-type inputs can have these as their source.
    get:
      description: Retrieve the list of buttons.
      is: [ paginated ]
      responses:
        200:
          description: Success - OK
          headers:
            Allow:
              example: GET
          body:
            example: !include buttons-get.example
                      
    /{inputname}:
      description: A specific button.
      get:
        description: Retrieve a specific button.
        responses:
          200:
            description: Success - OK
            headers:
              Allow:
                example: GET, PUT, DELETE
            body:
              example: !include button-get.example
          404:
            description: Error - NOT FOUND
            body:
              application/problem+json:
                example: !include button-not-found.example
      put:
        description: Create or update a button.
        body:
         application/vnd.synyx.sybil-v1+json:
           schema: !include button.schema
           example: !include button-put.example
        responses:
         200:
           description: |
             Success - OK
             
             **Example:** See below.
         201:
           description: Success - CREATED
           body:
             example: !include button-get.example
         400:
           description: Error - BAD REQUEST
           body:
             application/problem+json:
               example: !include button-put-validation-error.example
      delete:
        description: Delete a button.
        responses:
         204:
           description: Success - NO CONTENT
         404:
           description: Error - NOT FOUND
           body:
             application/problem+json:
               example: !include button-not-found.example

  /sensors:
    description: List of sensors. Used internally.
    get:
      description: Retrieve the list of sensors.
      is: [ paginated ]
      responses:
        200:
          description: Success - OK
          headers:
            Allow:
              example: GET
          body:
            example: !include sensors-get.example
                      
    /{sensorname}:
      description: A specific sensor.
      get:
        description: Retrieve a specific sensor.
        responses:
          200:
            description: Success - OK
            headers:
              Allow:
                example: GET, PUT, DELETE
            body:
              example: !include sensor-get.example
          404:
            description: Error - NOT FOUND
            body:
              application/problem+json:
                example: !include sensor-not-found.example
      put:
        description: Create or update a sensor.
        body:
         application/vnd.synyx.sybil-v1+json:
           schema: !include sensor.schema
           example: !include sensor-put.example
        responses:
         200:
           description: |
             Success - OK
             
             **Example:** See below.
         201:
           description: Success - CREATED
           body:
             example: !include sensor-get.example
         400:
           description: Error - BAD REQUEST
           body:
             application/problem+json:
               example: !include sensor-put-validation-error.example
      delete:
        description: Delete a sensor.
        responses:
         204:
           description: Success - NO CONTENT
         404:
           description: Error - NOT FOUND
           body:
             application/problem+json:
               example: !include sensor-not-found.example
