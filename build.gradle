apply plugin: 'java' //Java plugin
apply plugin: 'war' //war plugin

sourceCompatibility = 1.8 //Java 8
version = '0.1'

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/libs-release" }
    jcenter()
}

dependencies {
    //spring
    compile group: 'org.springframework', name: 'spring-web', version: '4.1.6.RELEASE'
    compile group: 'org.springframework.data', name: 'spring-data-neo4j', version: '3.3.0.RELEASE'
    compile group: 'org.springframework.hateoas', name: 'spring-hateoas', version: '0.17.0.RELEASE'
    compile group: 'org.springframework.plugin', name: 'spring-plugin-core', version: '1.2.0.RELEASE'
    compile group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final'
    compile group: 'org.hibernate', name: 'hibernate-validator', version: '5.1.3.Final'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
    providedCompile group: 'javax', name: 'javaee-web-api', version: '7.0'

    //json
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.5.0'
    
    //tinkerforge
    compile group: 'com.tinkerforge', name: 'tinkerforge', version: '2.1.4'

    //logging
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.3'
}



/**********************************
 * START of TESTING CONFIGURATION *
 **********************************/

/*** START Configure unit tests ***/
test {
    systemProperty 'logLevel', 'DEBUG' //enable debug logging for tests
    systemProperty 'logDirectory', 'build/logs/' //set log directory 
    filter {
        // only run tests ending in *UnitTest
        includeTestsMatching "*UnitTest"
    }
    ignoreFailures = true //don't make the whole build fail when unit tests fail
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.springframework', name: 'spring-test', version: '4.1.6.RELEASE'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.+'
    testCompile group: 'com.jayway.jsonpath', name: 'json-path', version: '1.2.0'
}

task showResults(type: Exec) {
    inputs.file file('build/reports/tests/index.html')
    outputs.file file('build/reports/tests/testresults.txt')
    commandLine 'sh', '-c', 'pandoc -t plain build/reports/tests/index.html|uniq -u|head -20|tail -16|sed \'s/[\\+| ]//g\' > build/reports/tests/testresults.txt && cat build/reports/tests/testresults.txt'
}

/*** Verbose Test ***/
task vTest (type: Test) {
    systemProperty 'logLevel', 'DEBUG' //enable debug logging for tests
    systemProperty 'logDirectory', 'build/logs/' //set log directory 
    testLogging {
        events "passed", "skipped", "failed"
    }
    //noinspection GroovyAssignabilityCheck
    finalizedBy(showResults)
    filter {
        // only run tests ending in *UnitTest
        includeTestsMatching "*UnitTest"
    }
}

/*** END Configure unit tests ***/



/*** START Load & Configure gretty embedded servlet container ***/
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath group: 'org.akhikhl.gretty', name: 'gretty', version: '+'
    }
}

apply plugin: 'org.akhikhl.gretty' // gretty = embedded jetty 9

gretty { // configure gretty
    recompileOnSourceChange = false; // not terribly useful with an autosaving IDE.
    contextPath = "/" // make the project available at / URL instead of /$projectname/
}
/*** END Load & Configure gretty embedded servlet container ***/

/*** START Configure Jacoco Code Coverage ***/
apply plugin: 'jacoco'


jacocoTestReport {
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)

    def reportDir = project.reporting.file("jacoco/test/html")
    reports {
        html.destination = reportDir
    }
    
    doLast {
        println "See report at: file://${reportDir.toURI().path}index.html"
    }
}

task testReport (dependsOn: jacocoTestReport)

/*** END Configure Jacoco Code Coverage ***/

/********************************
 * END of TESTING CONFIGURATION *
 ********************************/
