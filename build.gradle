apply plugin: 'java' //Java plugin
apply plugin: 'war' //war plugin

sourceCompatibility = 1.8 //Java 8
version = '0.1'

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/libs-release" }
    jcenter()
}

dependencies {
    //spring
    compile group: 'org.springframework', name: 'spring-web', version: '4.1.4.RELEASE'
    compile group: 'org.springframework.data', name: 'spring-data-neo4j', version: '3.2.2.RELEASE'
    compile group: 'org.springframework.hateoas', name: 'spring-hateoas', version: '0.16.0.RELEASE'
    compile group: 'org.springframework.plugin', name: 'spring-plugin-core', version: '1.1.0.RELEASE'
    compile group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final'
    compile group: 'org.hibernate', name: 'hibernate-validator', version: '5.1.3.Final'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
    providedCompile group: 'javax', name: 'javaee-web-api', version: '7.0'

    //json
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.5.0'
    compile group: 'com.jayway.jsonpath', name: 'json-path', version: '1.2.0'

    //tinkerforge
    compile group: 'com.tinkerforge', name: 'tinkerforge', version: '2.1.4'

    //logging
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.2'
    //compile group: 'ch.qos.logback.contrib', name: 'logback-json-classic', version: '0.1.2' //for logback jscon logging
    //compile group: 'ch.qos.logback.contrib', name: 'logback-jackson', version: '0.1.2' //for logback jscon logging
    //compile group: 'javax.mail', name: 'mail', version: '1.4.7' // for logback email notifications
}



/**********************************
 * START of TESTING CONFIGURATION *
 **********************************/

/*** START Configure unit tests ***/
task showResults(type: Exec) {
    commandLine 'sh', '-c', 'pandoc -t plain build/reports/tests/index.html|uniq -u|head -20|tail -16'
}

test {
    systemProperty 'logLevel', 'DEBUG' //enable debug logging for tests
    systemProperty 'logDirectory', 'build/logs/' //set log directory 
    systemProperty 'spring.profiles.active', 'dev'  //set active Spring profile to development
    testLogging {
        events "passed", "skipped", "failed"
        //showStandardStreams = true //show STDOUT and STDERR while gradle is running
    }
    finalizedBy(showResults)
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.springframework', name: 'spring-test', version: '4.1.4.RELEASE'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}
/*** END Configure unit tests ***/



/*** START Load & Configure gretty embedded servlet container ***/
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath group: 'org.akhikhl.gretty', name: 'gretty', version: '+'
    }
}

apply plugin: 'org.akhikhl.gretty' // gretty = embedded jetty 9

gretty { // configure gretty
    recompileOnSourceChange = false; // not terribly useful with an autosaving IDE.
    contextPath = "/" // make the project available at / URL instead of /$projectname/
    logbackConfigFile = 'conf/logback.xml'
    //systemProperty 'logLevel', 'DEBUG' //enable debug logging
    //jvmArgs = []
}
/*** END Load & Configure gretty embedded servlet container ***/



/*** START Configure Integration tests ***/
sourceSets {
    integTest { //add sources for Integration Tests, unlike main/ and test/ these are not provided by the java plugin
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
    }
}

task deleteDatabase(type: Delete) {
    delete '/tmp/sybildevdb/'
}

// kill processes that use certain ports
task freeAllPorts << {
    def ports = [14223, 14224, 14225, 8081, 8082, 8083, 8084, 8085, 8086]

    ports.each { port ->
        def cmd = "lsof -Fp -i :$port"
        def process = cmd.execute()
        process.in.eachLine { line ->
            def killProcess = "kill -9 ${ line.substring(1) }".execute()
            killProcess.waitFor()
        }
    }
}

task startRestServer1(type: ExecWait) {
    command 'node server/http.js port=8081 index=red.json verbose=true launch=now'
    ready '### 0.0.0.0 server listening on port'
    directory 'src/test/RestServer'
}

task startRestServer2(type: ExecWait) {
    command 'node server/http.js port=8082 index=red_anime.json verbose=true launch=now'
    ready '### 0.0.0.0 server listening on port'
    directory 'src/test/RestServer'
}

task startRestServer3(type: ExecWait) {
    command 'node server/http.js port=8083 index=yellow.json verbose=true launch=now'
    ready '### 0.0.0.0 server listening on port'
    directory 'src/test/RestServer'
}

task startRestServer4(type: ExecWait) {
    command 'node server/http.js port=8084 index=yellow_anime.json verbose=true launch=now'
    ready '### 0.0.0.0 server listening on port'
    directory 'src/test/RestServer'
}

task startRestServer5(type: ExecWait) {
    command 'node server/http.js port=8085 index=blue.json verbose=true launch=now'
    ready '### 0.0.0.0 server listening on port'
    directory 'src/test/RestServer'
}

task startRestServer6(type: ExecWait) {
    command 'node server/http.js port=8086 index=blue_anime.json verbose=true launch=now'
    ready '### 0.0.0.0 server listening on port'
    directory 'src/test/RestServer'
}

task startTFStubserver1(type: ExecWait) {
    command 'stubserver -p 14223 -d ' + projectDir + '/src/test/TFStubserver/ledstrip1.properties'
    ready 'BrickThread is running'
    directory '.'
}

task startTFStubserver2(type: ExecWait) {
    command 'stubserver -p 14224 -d ' + projectDir + '/src/test/TFStubserver/ledstrip2.properties'
    ready 'BrickThread is running'
    directory '.'
}

task startTFStubserver3(type: ExecWait) {
    command 'stubserver -p 14225 -d ' + projectDir + '/src/test/TFStubserver/ledstrip3.properties'
    ready 'BrickThread is running'
    directory '.'
}

task integTest(type: Test) { //define the integTest task as a Test task
    dependsOn(deleteDatabase, startTFStubserver1, startTFStubserver2, startTFStubserver3,
            startRestServer1, startRestServer2, startRestServer3, startRestServer4, startRestServer5, startRestServer6)
    finalizedBy(freeAllPorts, showResults)

    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
    
    systemProperty 'logLevel', 'DEBUG' //enable debug logging for tests
    systemProperty 'logDirectory', 'build/logs/' //set log directory 
    systemProperty 'spring.profiles.active', 'dev' //set active Spring profile to development
    testLogging {
        events "passed", "skipped", "failed"
        //showStandardStreams = true //show STDOUT and STDERR while gradle is running
    }
}

//uncomment to run integration tests with the build task. Check is a subtask of the build task, provided by java plugin
//check.dependsOn integTest

dependencies {
    //make sure the integTest task has the same dependencies
    integTestCompile sourceSets.main.output
    integTestCompile configurations.testCompile
    integTestCompile sourceSets.test.output
    integTestRuntime configurations.testRuntime
}

/**
 * ExecWait: Executes a task and waits for a certain output to continue.
 * 
 * @param  command  The command to execute
 * @param  ready  The String to look for in the command's output to continue with the build
 * @param  directory  The directory to execute the command in
 */
class ExecWait extends DefaultTask {
    String command
    String ready
    String directory

    @TaskAction
    def spawnProcess() {

        ProcessBuilder builder = new ProcessBuilder(command.split(' '))
        builder.redirectErrorStream(true)
        builder.directory(new File(directory))
        Process process = builder.start()

        InputStream stdout = process.getInputStream()
        BufferedReader reader = new BufferedReader(new
                InputStreamReader(stdout))
        
        def line
        while ((line = reader.readLine()) != null) {
            println line
            if (line.contains(ready)) {
                println "$command is ready"
                break;
            }
        }
    }
}
/*** END Configure Integration tests ***/

/********************************
 * END of TESTING CONFIGURATION *
 ********************************/
